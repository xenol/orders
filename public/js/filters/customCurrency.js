'use strict';

define(['./module'], function (filters) {
	'use strict';

	return filters.filter('customCurrency', ['numberFilter', function (numberFilter) {
		function isNumeric(value) {
			return !isNaN(parseFloat(value)) && isFinite(value);
		}

		return function (inputNumber, currencySymbol, decimalSeparator, thousandsSeparator, decimalDigits, prefixWithSymbol) {
			if (isNumeric(inputNumber)) {

				// defaults
				currencySymbol = typeof currencySymbol === "undefined" ? "$" : currencySymbol;
				decimalSeparator = typeof decimalSeparator === "undefined" ? "." : decimalSeparator;
				thousandsSeparator = typeof thousandsSeparator === "undefined" ? "," : thousandsSeparator;
				decimalDigits = typeof decimalDigits === "undefined" || !isNumeric(decimalDigits) ? 2 : decimalDigits;
				prefixWithSymbol = typeof prefixWithSymbol === "undefined" ? true : prefixWithSymbol;

				if (decimalDigits < 0) decimalDigits = 0;

				// Format the input number through the number filter
				// The resulting number will have "," as a thousands separator
				// and "." as a decimal separator.
				var formattedNumber = numberFilter(inputNumber, decimalDigits);

				// Extract the integral and the decimal parts
				var numberParts = formattedNumber.split(".");

				// Replace the "," symbol in the integral part
				// with the specified thousands separator.
				numberParts[0] = numberParts[0].split(",").join(thousandsSeparator);

				// Compose the final result
				var result = numberParts[0];

				if (numberParts.length == 2) {
					result += decimalSeparator + numberParts[1];
				}

				return (prefixWithSymbol ? currencySymbol + " " : "") + result + (prefixWithSymbol ? "" : " " + currencySymbol);
			}
		};
	}]);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcnMvY3VzdG9tQ3VycmVuY3kuanMiXSwibmFtZXMiOlsiZGVmaW5lIiwiZmlsdGVycyIsImZpbHRlciIsImlzTnVtZXJpYyIsInZhbHVlIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJpbnB1dE51bWJlciIsImN1cnJlbmN5U3ltYm9sIiwiZGVjaW1hbFNlcGFyYXRvciIsInRob3VzYW5kc1NlcGFyYXRvciIsImRlY2ltYWxEaWdpdHMiLCJwcmVmaXhXaXRoU3ltYm9sIiwiZm9ybWF0dGVkTnVtYmVyIiwibnVtYmVyRmlsdGVyIiwibnVtYmVyUGFydHMiLCJzcGxpdCIsImpvaW4iLCJyZXN1bHQiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU8sQ0FBQyxVQUFELENBQVAsRUFBcUIsbUJBQVc7QUFDL0I7O0FBRUEsUUFBT0MsUUFBUUMsTUFBUixDQUFlLGdCQUFmLEVBQWlDLENBQUMsY0FBRCxFQUFpQix3QkFBaUI7QUFDekUsV0FBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFDekIsVUFBUSxDQUFDQyxNQUFNQyxXQUFXRixLQUFYLENBQU4sQ0FBRCxJQUE2QkcsU0FBU0gsS0FBVCxDQUFyQztBQUNBOztBQUVELFNBQU8sVUFBQ0ksV0FBRCxFQUFjQyxjQUFkLEVBQThCQyxnQkFBOUIsRUFBZ0RDLGtCQUFoRCxFQUFvRUMsYUFBcEUsRUFBbUZDLGdCQUFuRixFQUF3RztBQUM5RyxPQUFLVixVQUFXSyxXQUFYLENBQUwsRUFBZ0M7O0FBRS9CO0FBQ0FDLHFCQUFzQixPQUFPQSxjQUFQLEtBQTBCLFdBQTNCLEdBQTBDLEdBQTFDLEdBQWdEQSxjQUFyRTtBQUNBQyx1QkFBc0IsT0FBT0EsZ0JBQVAsS0FBNEIsV0FBN0IsR0FBNEMsR0FBNUMsR0FBa0RBLGdCQUF2RTtBQUNBQyx5QkFBc0IsT0FBT0Esa0JBQVAsS0FBOEIsV0FBL0IsR0FBOEMsR0FBOUMsR0FBb0RBLGtCQUF6RTtBQUNBQyxvQkFBc0IsT0FBT0EsYUFBUCxLQUF5QixXQUF6QixJQUF3QyxDQUFDVCxVQUFVUyxhQUFWLENBQTFDLEdBQXNFLENBQXRFLEdBQTBFQSxhQUEvRjtBQUNBQyx1QkFBc0IsT0FBT0EsZ0JBQVAsS0FBNEIsV0FBN0IsR0FBNEMsSUFBNUMsR0FBbURBLGdCQUF4RTs7QUFFQSxRQUFJRCxnQkFBZ0IsQ0FBcEIsRUFBdUJBLGdCQUFnQixDQUFoQjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0EsUUFBSUUsa0JBQWtCQyxhQUFhUCxXQUFiLEVBQTBCSSxhQUExQixDQUF0Qjs7QUFFQTtBQUNBLFFBQUlJLGNBQWNGLGdCQUFnQkcsS0FBaEIsQ0FBc0IsR0FBdEIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBRCxnQkFBWSxDQUFaLElBQWlCQSxZQUFZLENBQVosRUFBZUMsS0FBZixDQUFxQixHQUFyQixFQUEwQkMsSUFBMUIsQ0FBK0JQLGtCQUEvQixDQUFqQjs7QUFFQTtBQUNBLFFBQUlRLFNBQVNILFlBQVksQ0FBWixDQUFiOztBQUVBLFFBQUlBLFlBQVlJLE1BQVosSUFBc0IsQ0FBMUIsRUFBNkI7QUFDNUJELGVBQVVULG1CQUFtQk0sWUFBWSxDQUFaLENBQTdCO0FBQ0E7O0FBRUQsV0FBTyxDQUFDSCxtQkFBbUJKLGlCQUFpQixHQUFwQyxHQUEwQyxFQUEzQyxJQUFpRFUsTUFBakQsSUFBMkROLG1CQUFtQixFQUFuQixHQUF3QixNQUFNSixjQUF6RixDQUFQO0FBQ0E7QUFDRCxHQWpDRDtBQWtDQSxFQXZDdUMsQ0FBakMsQ0FBUDtBQXdDQSxDQTNDRCIsImZpbGUiOiJmaWx0ZXJzL2N1c3RvbUN1cnJlbmN5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi9tb2R1bGUnXSwgZmlsdGVycyA9PiB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRyZXR1cm4gZmlsdGVycy5maWx0ZXIoJ2N1c3RvbUN1cnJlbmN5JywgWydudW1iZXJGaWx0ZXInLCBudW1iZXJGaWx0ZXIgPT4gIHtcblx0XHRmdW5jdGlvbiBpc051bWVyaWModmFsdWUpIHtcblx0XHRcdHJldHVybiAoIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSkpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gKGlucHV0TnVtYmVyLCBjdXJyZW5jeVN5bWJvbCwgZGVjaW1hbFNlcGFyYXRvciwgdGhvdXNhbmRzU2VwYXJhdG9yLCBkZWNpbWFsRGlnaXRzLCBwcmVmaXhXaXRoU3ltYm9sKSA9PiB7XG5cdFx0XHRpZiAoIGlzTnVtZXJpYyggaW5wdXROdW1iZXIgKSApIHtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIGRlZmF1bHRzXG5cdFx0XHRcdGN1cnJlbmN5U3ltYm9sICAgICA9ICh0eXBlb2YgY3VycmVuY3lTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIpID8gXCIkXCIgOiBjdXJyZW5jeVN5bWJvbDtcblx0XHRcdFx0ZGVjaW1hbFNlcGFyYXRvciAgID0gKHR5cGVvZiBkZWNpbWFsU2VwYXJhdG9yID09PSBcInVuZGVmaW5lZFwiKSA/IFwiLlwiIDogZGVjaW1hbFNlcGFyYXRvcjtcblx0XHRcdFx0dGhvdXNhbmRzU2VwYXJhdG9yID0gKHR5cGVvZiB0aG91c2FuZHNTZXBhcmF0b3IgPT09IFwidW5kZWZpbmVkXCIpID8gXCIsXCIgOiB0aG91c2FuZHNTZXBhcmF0b3I7XG5cdFx0XHRcdGRlY2ltYWxEaWdpdHMgICAgICA9ICh0eXBlb2YgZGVjaW1hbERpZ2l0cyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhaXNOdW1lcmljKGRlY2ltYWxEaWdpdHMpKSA/IDIgOiBkZWNpbWFsRGlnaXRzO1xuXHRcdFx0XHRwcmVmaXhXaXRoU3ltYm9sICAgPSAodHlwZW9mIHByZWZpeFdpdGhTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIpID8gdHJ1ZSA6IHByZWZpeFdpdGhTeW1ib2w7XG5cdFx0XHRcblx0XHRcdFx0aWYgKGRlY2ltYWxEaWdpdHMgPCAwKSBkZWNpbWFsRGlnaXRzID0gMDtcblx0XHRcdFxuXHRcdFx0XHQvLyBGb3JtYXQgdGhlIGlucHV0IG51bWJlciB0aHJvdWdoIHRoZSBudW1iZXIgZmlsdGVyXG5cdFx0XHRcdC8vIFRoZSByZXN1bHRpbmcgbnVtYmVyIHdpbGwgaGF2ZSBcIixcIiBhcyBhIHRob3VzYW5kcyBzZXBhcmF0b3Jcblx0XHRcdFx0Ly8gYW5kIFwiLlwiIGFzIGEgZGVjaW1hbCBzZXBhcmF0b3IuXG5cdFx0XHRcdGxldCBmb3JtYXR0ZWROdW1iZXIgPSBudW1iZXJGaWx0ZXIoaW5wdXROdW1iZXIsIGRlY2ltYWxEaWdpdHMpO1xuXHRcdFx0XG5cdFx0XHRcdC8vIEV4dHJhY3QgdGhlIGludGVncmFsIGFuZCB0aGUgZGVjaW1hbCBwYXJ0c1xuXHRcdFx0XHRsZXQgbnVtYmVyUGFydHMgPSBmb3JtYXR0ZWROdW1iZXIuc3BsaXQoXCIuXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gUmVwbGFjZSB0aGUgXCIsXCIgc3ltYm9sIGluIHRoZSBpbnRlZ3JhbCBwYXJ0XG5cdFx0XHRcdC8vIHdpdGggdGhlIHNwZWNpZmllZCB0aG91c2FuZHMgc2VwYXJhdG9yLlxuXHRcdFx0XHRudW1iZXJQYXJ0c1swXSA9IG51bWJlclBhcnRzWzBdLnNwbGl0KFwiLFwiKS5qb2luKHRob3VzYW5kc1NlcGFyYXRvcik7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBDb21wb3NlIHRoZSBmaW5hbCByZXN1bHRcblx0XHRcdFx0bGV0IHJlc3VsdCA9IG51bWJlclBhcnRzWzBdO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKG51bWJlclBhcnRzLmxlbmd0aCA9PSAyKSB7XG5cdFx0XHRcdFx0cmVzdWx0ICs9IGRlY2ltYWxTZXBhcmF0b3IgKyBudW1iZXJQYXJ0c1sxXTtcblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRcdHJldHVybiAocHJlZml4V2l0aFN5bWJvbCA/IGN1cnJlbmN5U3ltYm9sICsgXCIgXCIgOiBcIlwiKSArIHJlc3VsdCArIChwcmVmaXhXaXRoU3ltYm9sID8gXCJcIiA6IFwiIFwiICsgY3VycmVuY3lTeW1ib2wpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1dKTtcbn0pO1xuIl19
